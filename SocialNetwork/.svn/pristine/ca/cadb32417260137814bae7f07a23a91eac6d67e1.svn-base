package Dominion;

import java.sql.SQLException;

import utilidades.leer;

import Persistence.CrudDAO;
import Persistence.FollowsDAO;
import Persistence.MessageDAO;
import Persistence.NotificationDAO;
import Persistence.ReviewerTagDAO;
import Persistence.TagDAO;
import Persistence.UserDAO;

import java.util.*; 

public class User {
	
	protected String email;
	protected String name;
	protected String second_name;
	protected String city;
	protected String birth_date;
	protected String password;
	protected String rol; 
	
	
	public User(String email, String password, String name, String sname, String city, String bdate){
		this.email=email;
		this.name=name;
		this.second_name=sname;
		this.city=city;
		this.birth_date=bdate;
		this.password=password;
	}
	public User(){
		
	}
	
	public User(String email) throws SQLException{
		CrudDAO<User> c = new UserDAO();
		User u=c.read(this);
		this.email=u.getEmail();
		this.name=u.getName();
		this.second_name=u.getSecond_name();
		this.city=u.getCity();
		this.birth_date=u.getBirth_date();
		this.password=u.getPassword();
	}

	
	
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getSecond_name() {
		return second_name;
	}
	public void setSecond_name(String second_name) {
		this.second_name = second_name;
	}
	public String getCity() {
		return city;
	}
	public void setCity(String city) {
		this.city = city;
	}
	public String getBirth_date() {
		return birth_date;
	}
	public void setBirth_date(String birth_date) {
		this.birth_date = birth_date;
	}
	public String getPassword() {
		return password;
	}
	public void setPassword(String password) {
		this.password = password;
	}
	public String getRol() {
		return rol;
	}
	public void setRol(String rol) {
		this.rol = rol;
	}
	@Override
	public String toString(){
		String s= getEmail()+": "+name+" "+second_name+", City: "+city+", Birth date:"+birth_date+", Rol:"+rol+", Password: "+password+"\n"; 
		return s;
	}
	
	
	public void edit_profile(User u) throws Exception{

		CrudDAO<User> c = new UserDAO();
		c.read(this);
		
		this.setBirth_date(u.getBirth_date());
		this.setCity(u.getCity());
		this.setName(u.getName());
		this.setPassword(u.getPassword()); 
		this.setSecond_name(u.getSecond_name());
		
		c.update(this);

	}
	public LinkedList<Follows> view_contacts() throws SQLException{

		
		Follows f = new Follows();
		f.setFollower_mail(this.email);
		CrudDAO<Follows> c=new FollowsDAO();
		LinkedList<Follows> l = c.readAll(f);
		
		return l;
		
	}
	public void write_message(Message m) throws SQLException{

		Notification message_notification = new Notification(m.getEmail_to(), "New message from " + m.getEmail_from() +" ","UNREAD", m.getDate() ); 
		
		m.setEmail_from(getEmail());   
		
		message_notification.send(); 
			
	}
	public void add_contact(User u) throws SQLException{
		
		Notification follower_notification = new Notification(u.getEmail(), "New follower: " + this.getEmail() +" ","UNREAD", leer.fecha() ); 
		follower_notification.send(); 
		
	}

	public User log(String email, String password) throws Exception{

		User u = new User(email);
		
		if (!u.password.equals(password)) u=null;
		
		return u; 
	}
	
	public LinkedList<ReviewerTag> search_tag(String tag) throws SQLException {
		// Devolvemos una lista de IDs para no saturar el sistema con consultas
		// Pero lo suyo sería devolver una lista de Users
		Tag t = new Tag();
		t.setIssue(tag);
		CrudDAO<Tag> c = new TagDAO();
		t=c.read(t);
		
		ReviewerTag rt= new ReviewerTag();
		rt.setIdTag(t.getIdTag());
		CrudDAO<ReviewerTag> c2 = new ReviewerTagDAO();
		LinkedList<ReviewerTag> users = c2.readAll(rt);
		
		return users;
	}
	public LinkedList<Notification> get_notifications() throws SQLException{
		 
		Notification n = new Notification();
		n.setMail_notified(this.email);
		n.setState("UNREAD");
		CrudDAO<Notification> c = new NotificationDAO();
		LinkedList<Notification> notify_list = c.readAll(n);
		return notify_list; 
	}
	public void update_notifications(LinkedList<Notification> notify_list) throws SQLException{
		
		CrudDAO<Notification> c = new NotificationDAO();
		while(!notify_list.isEmpty()){
			notify_list.getFirst().setState("READ");
			c.update(notify_list.getFirst());
		}
		
	}
	public LinkedList<Message> get_Messages() throws SQLException{
		CrudDAO<Message> c = new MessageDAO();
		LinkedList<Message> message_list = new LinkedList<Message>();
		
		Message m= new Message();
		m.setEmail_to(this.email);
		message_list=c.readAll(m);

		return message_list; 
	}
		
 
	
}




