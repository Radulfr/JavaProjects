package Dominion;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.LinkedList;

import Persistence.Agent;
import Persistence.AgentFactory;

public class Sistema{

	public Sistema(){
	}
	
	
	/*
	 * Devuelve una LinkedList con los Revisores asignados al articulo pasado por parámetro
	 */
	public LinkedList<String> PublicationsToReviewer(Article art){
		LinkedList<String> RevisoresMismoTag = new LinkedList<String>();
		LinkedList<String> Retorno = new LinkedList<String>();
		AgentFactory a = Agent.getDbCon();
		Notification n; 
		try{
			ResultSet r = a.search_Reviewer_byTag(art);
			
			//Obtenemos todos los revisores con el mismo tag que el articulo.
			while(r.next()){
				RevisoresMismoTag.add((r.getString("reviewer_mail")));
			}
			
	
			int KarmaAuthor = a.getKarmaOfAuthor(art.getId_author());
			
			Retorno=TwoReviewerByTag(RevisoresMismoTag,KarmaAuthor);
			System.out.println(Retorno.toString());
			//Introducimos la relacion de los 2 revisores que miraran el articulo
			while(!Retorno.isEmpty()){ // De esta manera controlamos que si hay un solo revisor no da fallos
				if(!Retorno.element().equals("Empty")){
					a.add_ArticleReviewer(art.getId(), Retorno.element(), utilidades.leer.fecha());
					n=new Notification(Retorno.poll(),"New article","UNREAD",utilidades.leer.fecha());
					n.send();
				}
			}

		}
		catch(Exception e){
			System.out.println("Error asignando revisores"); 
		}
		return Retorno;
		
	}

	private LinkedList<String> TwoReviewerByTag (LinkedList<String> L, int karmaAut)throws SQLException{
		LinkedList<String> retorno = new LinkedList<String>();
		
		int MAXKARMA = 99999999;
		int TwoK [] = new int[2];
		TwoK[0]=MAXKARMA;
		TwoK[1]=MAXKARMA;
		
		String TwoR [] = new String[2];
		TwoR[0]="Empty";
		TwoR[1]="Empty";
		
		AgentFactory a = Agent.getDbCon();
		int KR, KA = Math.abs(karmaAut);
	
		/*
		 * Este bucle recorre todos los revisores que coinciden con el TAG del articulo
		 * y quedan en una lista los 2 revisores con los karmas mas similares.
		 */
		for(int i=1; i<L.size();i++){
			KR = Math.abs(a.getKarmaOfReviewer(L.get(i)));
			int resta = Math.abs(KA-KR);
			
			
			if(resta<TwoK[0] && resta>=TwoK[1]){
				TwoK[0]=resta;
				TwoR[0]=L.get(i);
			}
			
			else if(resta<TwoK[1] && resta>=TwoK[0]){
				TwoK[1]=resta;
				TwoR[1]=L.get(i);
			}
			
			else if(resta<TwoK[0] && resta<TwoK[1]){
				if(Math.abs(resta-TwoK[0]) >= Math.abs(resta-TwoK[1])){
					TwoK[0]=resta;
					TwoR[0]=L.get(i);
				}
				else{
					TwoK[1]=resta;
					TwoR[1]=L.get(i);
				}
			}
			
		}
		System.out.println(TwoR[0] + " - " + TwoR[1]); 
		retorno.add(TwoR[0]);
		retorno.add(TwoR[1]);
		return retorno;
	}
	
	/***
	 * @desc Sets the mark of a publication
	 * @param idArticle (int)
	 * @return Mark set
	 * @throws SQLException 
	 */
	public int setMarkOfPublication (int idArticle) throws SQLException{
		AgentFactory age = Agent.getDbCon();
		return age.setAvMarkOfPublication(idArticle);
	}

	
}