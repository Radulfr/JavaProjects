package Persistence;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.LinkedList;

import Dominion.*;

public class ArticleDAO extends CrudDAO<Article>{

	//Corresponde a send_publication
    @Override
    public void create(Article articulo) {
        String sqlQuerry = "INSERT INTO Article (title, publishing_date, idAuthor, commentAuthor, state, mark, body) VALUES ('"
        		+articulo.getTitle()+"','"+articulo.getPublishing_date()+"','"+articulo.getId_author()
        		+"','"+articulo.getComment_author()+"','"+articulo.getState()+"','"+articulo.getMark()
        		+"','"+articulo.getBody()+"')";
        try {
			AgenteBD.getDbCon().queryUpdate(sqlQuerry);
		} catch (SQLException e) {
			e.printStackTrace();
		}
    }

    @Override
    public void delete(Article articulo) {
    	 try {
 			AgenteBD.getDbCon().queryUpdate("DELETE FROM Article WHERE idArticle='"+articulo.getId()+"'");
 		} catch (SQLException e) {
 			e.printStackTrace();
 		}
    }
    
    
    //Corresponde a get_article_by_id del antiguo agente
    @Override
    public Article read(Article articulo) throws SQLException {
    	String consult="SELECT * FROM Article WHERE idArticle=" + articulo.getId()+ "";
    	if (articulo.getId()==-1){ //buscar el id
    		consult="SELECT * FROM Article WHERE title='"+articulo.getTitle()
   		         +"' AND publishing_date='" + articulo.getPublishing_date()
   		         +"' AND idAuthor='" +articulo.getId_author()
   		         +"' AND commentAuthor='"+articulo.getComment_author()
   		         +"' AND state='"+ articulo.getState()
   		         +"' AND mark='"+articulo.getMark()+ "'";
    	}
    	ResultSet rs = AgenteBD.getDbCon().query(consult);
        if (rs != null) {
            try {
                while (rs.next()) {
                    articulo.setId(rs.getInt("idArticle"));
                    articulo.setTitle(rs.getString("title"));
                    articulo.setPublishing_date(rs.getString("publishing_date"));
                    articulo.setId_author(rs.getString("idAuthor"));
					articulo.setComment_author(rs.getString("commentAuthor"));
					articulo.setState(rs.getString("state"));
					articulo.setMark(rs.getInt("mark"));
					articulo.setBody(rs.getString("body"));
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
        rs.close();
        return articulo;
    }

    //Actualiza el objeto entero. Si quiero CancelReview o setCommentInArticle pues de debe modificar el objeto para actualizar
    @Override
    public void update(Article articulo) {
    	 String sqlQuerry="UPDATE Article SET title='"+articulo.getTitle()
		         +"', publishing_date='" + articulo.getPublishing_date()
		         +"', idAuthor='" +articulo.getId_author()
		         +"', commentAuthor='"+articulo.getComment_author()
		         +"', state='"+ articulo.getState()
		         +"', mark='"+articulo.getMark()
		         + "' WHERE idArticle='" + articulo.getId()+ "'";
		try {
			AgenteBD.getDbCon().queryUpdate(sqlQuerry);
		} catch (SQLException e) {
			e.printStackTrace();
		}       
    }
    
    //Lee todos los articulos por su estado si se rellena o todos en general.
    //Corresponde con get_articles_with_state | get_publicationsAuthor del antiguo agente
    @Override
    public LinkedList<Article> readAll(Article articulo) throws SQLException{
    	
    	String consult;
    	if (articulo.getState()==null){
    		if (articulo.getId_author()==null){
    			consult="SELECT * from Article";
    		}else{ 
    			if (articulo.getTitle()!=null){ //si busco por autor y titulo
    				consult="SELECT * FROM Article WHERE title='" + articulo.getTitle()+ "' AND idAuthor='" + articulo.getId_author()+ "'";
    			}else consult="SELECT * FROM Article WHERE idAuthor='" + articulo.getId_author()+ "'";
    		}
    	}
    	else { //si solo busco por estado
    		consult="SELECT * FROM Article WHERE state='" + articulo.getState()+ "'";
    	}
    	ResultSet rs = AgenteBD.getDbCon().query(consult);
    	LinkedList<Article> listArt = new LinkedList<Article>();
        if (rs != null) {
            try {
                while (rs.next()) {
                	Article a = new Article();
                    a.setId(rs.getInt("idArticle"));
                    a.setTitle(rs.getString("title"));
                    a.setPublishing_date(rs.getString("publishing_date"));
                    a.setId_author(rs.getString("idAuthor"));
					a.setComment_author(rs.getString("commentAuthor"));
					a.setState(rs.getString("state"));
					a.setMark(rs.getInt("mark"));
					a.setBody(rs.getString("body"));
					listArt.add(a);
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
        rs.close();
        return listArt;
    }
}
